"use client";

import React, { useState, useEffect, useCallback } from 'react';
// import { useCapacity } from '@/hooks/useCapacity'; // TEMPORARILY DISABLED
import { CapacityStatusSkeleton, CapacityUpdateIndicator, LoadingOverlay } from '@/components/ui/skeleton';

interface HeroSectionProps {
  onRegisterClick?: () => void;
  onViewPackagesClick?: () => void;
}

interface CountdownTime {
  days: number;
  hours: number;
  minutes: number;
  seconds: number;
}

export default function HeroSection({ onRegisterClick, onViewPackagesClick }: HeroSectionProps) {
  const [timeLeft, setTimeLeft] = useState<CountdownTime>({
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0
  });
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [lastUpdateTime, setLastUpdateTime] = useState<Date | null>(null);

  // Memoize callbacks to prevent infinite re-renders
  const handleSuccess = useCallback(() => {
    setIsRefreshing(false);
    setLastUpdateTime(new Date());
  }, []);

  const handleError = useCallback(() => {
    setIsRefreshing(false);
  }, []);

  // TEMPORARILY DISABLED - Testing without hooks to isolate API spam issue
  // const { data: capacityData, loading: capacityLoading, error: capacityError, refetch } = useCapacity({
  //   onSuccess: handleSuccess,
  //   onError: handleError
  // });
  
  // Mock data for testing during isolation
  const capacityData = null;
  const capacityLoading = false;
  const capacityError = null;
  const refetch = () => Promise.resolve();

  // Track when capacity is updating (for smooth transitions)
  useEffect(() => {
    if (capacityLoading && capacityData) {
      setIsRefreshing(true);
    }
  }, [capacityLoading, capacityData]);

  // Countdown timer hook
  useEffect(() => {
    // Target date: 24 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2568 (2025-09-24) 23:59:59
    const targetDate = new Date('2025-09-24T23:59:59').getTime();

    const updateCountdown = () => {
      const now = new Date().getTime();
      const timeLeftMs = targetDate - now;

      if (timeLeftMs > 0) {
        const days = Math.floor(timeLeftMs / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeLeftMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeftMs % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeftMs % (1000 * 60)) / 1000);

        setTimeLeft({ days, hours, minutes, seconds });
      } else {
        setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });
      }
    };

    // Update immediately and then every second
    updateCountdown();
    const interval = setInterval(updateCountdown, 1000);

    return () => clearInterval(interval);
  }, []);

  const handleRegisterClick = () => {
    if (onRegisterClick) {
      onRegisterClick();
    }
  };

  const handleViewPackagesClick = () => {
    if (onViewPackagesClick) {
      onViewPackagesClick();
    } else {
      // Scroll to pricing section
      const element = document.getElementById('pricing');
      if (element) {
        element.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    }
  };

  return (
    <section 
      className="bg-gradient-to-br from-tbat-bg to-white py-20" 
      aria-labelledby="hero-title"
    >
      <div className="max-w-6xl mx-auto px-4">
        <div className="text-center">
          {/* Badge */}
          <span className="inline-block bg-gradient-to-r from-orange-500 to-red-500 text-white px-4 py-2 rounded-full text-sm font-semibold mb-4 animate-fade-in-up">
            ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏™‡∏≠‡∏ö TBAT Mock Exam ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1 ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠
          </span>

          {/* Main Title */}
          <h1 
            id="hero-title" 
            className="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-800 mb-4 animate-fade-in font-prompt"
          >
            ‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≠‡∏ö TBAT ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
            <br />
            <span className="text-tbat-primary">‡∏™‡∏°‡∏±‡∏Ñ‡∏£ "‡∏™‡∏≠‡∏ö‡∏ü‡∏£‡∏µ" ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô</span>
          </h1>

          {/* Subtitle */}
          <p className="text-lg md:text-xl text-gray-600 mb-6 animate-fade-in-up font-prompt">
            <strong>Mock Exam ‡∏à‡∏±‡∏î‡πÇ‡∏î‡∏¢ ASPECT</strong> ‚Ä¢ <strong>TBAT ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏î‡πÇ‡∏î‡∏¢‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢</strong>
            <br />
            ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏ì‡∏∞‡∏™‡∏≤‡∏¢‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
          </p>

          {/* Event Details Card */}
          <div className="bg-white rounded-xl shadow-lg p-6 max-w-2xl mx-auto mb-8 animate-scale-in hover:shadow-xl transition-shadow duration-300">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-left">
              <div className="flex items-start">
                <span className="text-2xl mr-3" aria-hidden="true">üóìÔ∏è</span>
                <div>
                  <h3 className="font-semibold text-gray-800 font-prompt">‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤</h3>
                  <p className="text-gray-600 text-base font-prompt">‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πà 27 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2568</p>
                  <div className="mt-1 space-y-1">
                    <p className="text-gray-600 text-base font-prompt">
                      ‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πâ‡∏≤: 09:00 - 12:00 ‡∏ô. 
                      <span className="text-sm text-orange-600 block">(‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 08:15)</span>
                    </p>
                    <p className="text-gray-600 text-base font-prompt">
                      ‡∏£‡∏≠‡∏ö‡∏ö‡πà‡∏≤‡∏¢: 13:00 - 16:00 ‡∏ô. 
                      <span className="text-sm text-orange-600 block">(‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô 12:15)</span>
                    </p>
                  </div>
                  <span className="inline-block bg-red-100 text-red-700 text-xs px-2 py-1 rounded animate-pulse font-prompt">
                    (‡πÇ‡∏õ‡∏£‡∏î‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö 45 ‡∏ô‡∏≤‡∏ó‡∏µ)
                  </span>
                </div>
              </div>

              <div className="flex items-start">
                <span className="text-2xl mr-3" aria-hidden="true">üìç</span>
                <div>
                  <h3 className="font-semibold text-gray-800 font-prompt">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</h3>
                  <p className="text-gray-600 text-base font-prompt">‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£ ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà</p>
                  <p className="text-gray-500 text-sm font-prompt">‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≠‡∏á‡∏Å‡∏ß‡∏≤‡∏ß 1 ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≠‡∏á‡∏Å‡∏ß‡∏≤‡∏ß 2</p>
                  <a 
                    href="https://maps.app.goo.gl/6crQRkv2eZzPwoXP8" 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-tbat-primary text-xs hover:underline font-prompt"
                  >
                    ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Google Maps
                  </a>
                  <div className="mt-1">
                    <span className="inline-block bg-red-100 text-red-700 text-xs px-2 py-1 rounded animate-pulse font-prompt">
                      ‚Ä¢ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≠‡∏ö‡∏ü‡∏£‡∏µ ‡∏à‡∏≥‡∏Å‡∏±‡∏î 300 ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* CTA Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center mb-6 animate-slide-in-right">
            <button 
              onClick={handleRegisterClick}
              data-testid="register-button"
              className="px-8 py-3 bg-tbat-primary text-white rounded-lg hover:bg-tbat-secondary transition-colors duration-200 font-semibold text-lg btn-hover-effect font-prompt"
            >
              ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ü‡∏£‡∏µ‡πÄ‡∏•‡∏¢
            </button>
            <button 
              onClick={handleViewPackagesClick}
              className="px-8 py-3 border-2 border-tbat-primary text-tbat-primary rounded-lg hover:bg-tbat-primary hover:text-white transition-colors duration-200 font-semibold text-lg font-prompt"
            >
              ‡∏î‡∏π‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à
            </button>
          </div>

          {/* Countdown Timer */}
          <div className="bg-white rounded-xl shadow-lg p-6 max-w-2xl mx-auto mb-6 animate-scale-in">
            <div className="text-center mb-4">
              <h3 className="text-lg font-semibold text-gray-800 mb-2 font-prompt">‚è∞ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£</h3>
              <p className="text-sm text-gray-600 mb-3 font-prompt">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 24 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2568 ‡πÄ‡∏ß‡∏•‡∏≤ 23:59 ‡∏ô.</p>
              <div className="grid grid-cols-4 gap-3 text-center">
                <div className="bg-tbat-primary text-white rounded-lg p-3">
                  <div className="text-xl font-bold font-prompt">{timeLeft.days}</div>
                  <div className="text-xs font-prompt">‡∏ß‡∏±‡∏ô</div>
                </div>
                <div className="bg-tbat-primary text-white rounded-lg p-3">
                  <div className="text-xl font-bold font-prompt">{timeLeft.hours.toString().padStart(2, '0')}</div>
                  <div className="text-xs font-prompt">‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</div>
                </div>
                <div className="bg-tbat-primary text-white rounded-lg p-3">
                  <div className="text-xl font-bold font-prompt">{timeLeft.minutes.toString().padStart(2, '0')}</div>
                  <div className="text-xs font-prompt">‡∏ô‡∏≤‡∏ó‡∏µ</div>
                </div>
                <div className="bg-tbat-primary text-white rounded-lg p-3">
                  <div className="text-xl font-bold font-prompt">{timeLeft.seconds.toString().padStart(2, '0')}</div>
                  <div className="text-xs font-prompt">‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</div>
                </div>
              </div>
            </div>
          </div>

          {/* Capacity Status */}
          {capacityLoading && !capacityData ? (
            <CapacityStatusSkeleton />
          ) : capacityError && !capacityData ? (
            <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-4 max-w-2xl mx-auto mb-6">
              <p className="text-yellow-700 text-sm text-center font-prompt">
                {capacityError.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}
              </p>
              <button 
                onClick={() => refetch()}
                className="mt-2 px-4 py-2 bg-yellow-100 text-yellow-700 rounded-lg hover:bg-yellow-200 transition-colors font-prompt text-sm"
              >
                ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
              </button>
            </div>
          ) : capacityData && (
            <div className="bg-white rounded-xl shadow-lg p-6 max-w-2xl mx-auto mb-6 animate-scale-in relative">
              <LoadingOverlay isVisible={isRefreshing} message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..." />
              <div className="text-center mb-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-2 font-prompt">üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h3>
                <CapacityUpdateIndicator isUpdating={isRefreshing} />
                {lastUpdateTime && (
                  <p className="text-xs text-gray-500 mb-3 font-prompt">
                    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {lastUpdateTime.toLocaleTimeString('th-TH')}
                  </p>
                )}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {capacityData.map((session) => {
                    const percentage = (session.current_count / session.max_capacity) * 100;
                    const getStatusColor = () => {
                      if (session.availability_status === 'FULL') return 'text-red-600 bg-red-50';
                      if (session.availability_status === 'NEARLY_FULL') return 'text-orange-600 bg-orange-50';
                      if (session.availability_status === 'ADVANCED_ONLY') return 'text-purple-600 bg-purple-50';
                      return 'text-green-600 bg-green-50';
                    };

                    return (
                      <div 
                        key={session.session_time} 
                        className={`p-4 rounded-lg border ${getStatusColor()} transition-all duration-300 hover:shadow-md`}
                        role="region"
                        aria-label={`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á${session.session_time === 'MORNING' ? '‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πâ‡∏≤' : '‡∏£‡∏≠‡∏ö‡∏ö‡πà‡∏≤‡∏¢'}`}
                      >
                        <h4 className="font-semibold mb-2 font-prompt">
                          {session.session_time === 'MORNING' ? 'üåÖ ‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πâ‡∏≤ (09:00-12:00)' : 'üåÜ ‡∏£‡∏≠‡∏ö‡∏ö‡πà‡∏≤‡∏¢ (13:00-16:00)'}
                        </h4>
                        <div className="space-y-2">
                          <div className="text-sm font-prompt">
                            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <span className="font-semibold" aria-live="polite">{session.thai_message}</span>
                          </div>
                          {session.availability_status !== 'ADVANCED_ONLY' && (
                            <div className="text-sm font-prompt">
                              ‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£: {session.current_count}/{session.max_capacity} ‡∏Ñ‡∏ô ({percentage.toFixed(1)}%)
                            </div>
                          )}
                          {/* Progress bar */}
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div 
                              className={`h-2 rounded-full transition-all duration-300 ${
                                session.availability_status === 'FULL' ? 'bg-red-500' :
                                session.availability_status === 'NEARLY_FULL' ? 'bg-orange-500' :
                                session.availability_status === 'ADVANCED_ONLY' ? 'bg-purple-500' :
                                'bg-green-500'
                              }`}
                              style={{ width: `${Math.min(percentage, 100)}%` }}
                            ></div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
                <p className="text-xs text-gray-500 mt-3 font-prompt">
                  * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ | ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                </p>
              </div>
            </div>
          )}

          {/* Exam Date Clarification */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-4xl mx-auto animate-fade-in-up">
            {/* Mock Exam */}
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 text-center">
              <h4 className="font-bold text-green-800 mb-1 font-prompt">üìù TBAT Mock Exam</h4>
              <p className="text-green-700 text-base font-prompt">
                <strong>‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πà 27 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô 2568</strong>
              </p>
              <p className="text-green-600 text-xs font-prompt">‡∏™‡∏ô‡∏≤‡∏°‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà</p>
            </div>
            
            {/* Real TBAT */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-center">
              <h4 className="font-bold text-blue-800 mb-1 font-prompt">üèõÔ∏è TBAT ‡∏à‡∏£‡∏¥‡∏á</h4>
              <p className="text-blue-700 text-base font-prompt">
                <strong>‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏ó‡∏µ‡πà 5 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏° 2568</strong>
              </p>
              <p className="text-blue-600 text-xs font-prompt">‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}