'use client';

import React from 'react';

// Network error state component
export const NetworkErrorState: React.FC<{
  onRetry: () => void;
  message?: string;
}> = ({ onRetry, message = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ' }) => (
  <div className="text-center py-8">
    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 max-w-md mx-auto">
      <div className="text-yellow-600 text-3xl mb-3">üì°</div>
      <h3 className="text-lg font-semibold text-yellow-800 mb-2 font-prompt">
        ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á
      </h3>
      <p className="text-yellow-700 mb-4 text-sm font-prompt">
        {message}
      </p>
      <div className="space-y-2">
        <button
          onClick={onRetry}
          className="w-full px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors duration-200 font-prompt"
        >
          ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
        </button>
        <p className="text-xs text-yellow-600 font-prompt">
          ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        </p>
      </div>
    </div>
  </div>
);

// Data validation error state
export const DataValidationErrorState: React.FC<{
  onRetry: () => void;
  details?: string;
}> = ({ onRetry, details }) => (
  <div className="text-center py-8">
    <div className="bg-orange-50 border border-orange-200 rounded-lg p-6 max-w-md mx-auto">
      <div className="text-orange-600 text-3xl mb-3">‚ö†Ô∏è</div>
      <h3 className="text-lg font-semibold text-orange-800 mb-2 font-prompt">
        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      </h3>
      <p className="text-orange-700 mb-4 text-sm font-prompt">
        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
      </p>
      {details && (
        <details className="mb-4 text-left">
          <summary className="text-orange-700 text-xs cursor-pointer hover:text-orange-800 font-prompt">
            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
          </summary>
          <pre className="mt-2 text-xs text-orange-600 bg-orange-100 p-2 rounded overflow-auto max-h-24">
            {details}
          </pre>
        </details>
      )}
      <button
        onClick={onRetry}
        className="w-full px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors duration-200 font-prompt"
      >
        ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      </button>
    </div>
  </div>
);

// Empty state component
export const EmptyDataState: React.FC<{
  title?: string;
  message?: string;
  actionText?: string;
  onAction?: () => void;
}> = ({ 
  title = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
  message = '‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•',
  actionText,
  onAction
}) => (
  <div className="text-center py-12">
    <div className="max-w-md mx-auto">
      <div className="text-gray-400 text-4xl mb-4">üìÑ</div>
      <h3 className="text-lg font-semibold text-gray-700 mb-2 font-prompt">
        {title}
      </h3>
      <p className="text-gray-600 mb-6 text-sm font-prompt">
        {message}
      </p>
      {actionText && onAction && (
        <button
          onClick={onAction}
          className="px-6 py-2 bg-tbat-primary text-white rounded-lg hover:bg-tbat-secondary transition-colors duration-200 font-prompt"
        >
          {actionText}
        </button>
      )}
    </div>
  </div>
);

// Capacity full state component
export const CapacityFullState: React.FC<{
  sessionType?: 'morning' | 'afternoon' | 'both';
  advancedAvailable?: boolean;
  onUpgrade?: () => void;
}> = ({ 
  sessionType = 'both', 
  advancedAvailable = false,
  onUpgrade 
}) => {
  const getSessionText = () => {
    switch (sessionType) {
      case 'morning': return '‡∏£‡∏≠‡∏ö‡πÄ‡∏ä‡πâ‡∏≤ (09:00-12:00)';
      case 'afternoon': return '‡∏£‡∏≠‡∏ö‡∏ö‡πà‡∏≤‡∏¢ (13:00-16:00)';
      default: return '‡∏ó‡∏∏‡∏Å‡∏£‡∏≠‡∏ö';
    }
  };

  return (
    <div className="text-center py-8">
      <div className={`border rounded-lg p-6 max-w-md mx-auto ${
        advancedAvailable 
          ? 'bg-purple-50 border-purple-200' 
          : 'bg-red-50 border-red-200'
      }`}>
        <div className={`text-3xl mb-3 ${
          advancedAvailable ? 'text-purple-600' : 'text-red-600'
        }`}>
          {advancedAvailable ? 'üîí' : 'üòî'}
        </div>
        <h3 className={`text-lg font-semibold mb-2 font-prompt ${
          advancedAvailable ? 'text-purple-800' : 'text-red-800'
        }`}>
          Free Package ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß
        </h3>
        <p className={`mb-4 text-sm font-prompt ${
          advancedAvailable ? 'text-purple-700' : 'text-red-700'
        }`}>
          {getSessionText()} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Free Package ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß
        </p>
        
        {advancedAvailable ? (
          <div className="space-y-3">
            <p className="text-purple-700 text-sm font-prompt">
              üåü ‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Advanced Package ‡πÑ‡∏î‡πâ
            </p>
            {onUpgrade && (
              <button
                onClick={onUpgrade}
                className="w-full px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors duration-200 font-prompt"
              >
                ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô Advanced Package
              </button>
            )}
          </div>
        ) : (
          <p className="text-red-600 text-sm font-prompt">
            ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ
          </p>
        )}
      </div>
    </div>
  );
};

// Maintenance mode state
export const MaintenanceState: React.FC<{
  estimatedTime?: string;
  message?: string;
}> = ({ 
  estimatedTime,
  message = '‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô'
}) => (
  <div className="text-center py-12">
    <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 max-w-md mx-auto">
      <div className="text-blue-600 text-4xl mb-4">üîß</div>
      <h3 className="text-lg font-semibold text-blue-800 mb-2 font-prompt">
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
      </h3>
      <p className="text-blue-700 mb-4 text-sm font-prompt">
        {message}
      </p>
      {estimatedTime && (
        <p className="text-blue-600 text-sm font-prompt">
          <strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô:</strong> {estimatedTime}
        </p>
      )}
      <p className="text-xs text-blue-500 mt-3 font-prompt">
        ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      </p>
    </div>
  </div>
);

// Timeout error state
export const TimeoutErrorState: React.FC<{
  onRetry: () => void;
  timeout?: number;
}> = ({ onRetry, timeout = 30 }) => (
  <div className="text-center py-8">
    <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md mx-auto">
      <div className="text-red-600 text-3xl mb-3">‚è±Ô∏è</div>
      <h3 className="text-lg font-semibold text-red-800 mb-2 font-prompt">
        ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      </h3>
      <p className="text-red-700 mb-4 text-sm font-prompt">
        ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô {timeout} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      </p>
      <div className="space-y-2">
        <button
          onClick={onRetry}
          className="w-full px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 font-prompt"
        >
          ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        </button>
        <p className="text-xs text-red-600 font-prompt">
          ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        </p>
      </div>
    </div>
  </div>
);